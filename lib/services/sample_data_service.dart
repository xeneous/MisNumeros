import 'package:uuid/uuid.dart';

import 'database_service.dart';
import '../models/transaccion.dart';
import '../models/cuenta.dart';
import '../models/categoria.dart';
import '../models/gasto_fijo.dart';
import '../models/contacto.dart';

class SampleDataService {
  final DatabaseService _databaseService = DatabaseService();
  final Uuid _uuid = const Uuid();

  Future<void> insertSampleData() async {
    try {
      // For demonstration, let's assume a user with ID 1 exists.
      // In a real app, this would be tied to the authenticated user.
      const int sampleUserId = 1;

      await createDefaultAccountsForUser(sampleUserId);
      await createDefaultCategoriesForUser(sampleUserId);
      await _insertSampleFixedExpenses(sampleUserId);
      await _insertSampleTransactions(sampleUserId);
      await _insertSampleContacts(sampleUserId);

      print('Sample data service needs to be updated for new schema');
    } catch (e) {
      print('Error insertando datos de ejemplo: $e');
    }
  }

  // Create default accounts for a new user
  Future<void> createDefaultAccountsForUser(int userId) async {
    try {
      final List<Cuenta> defaultAccounts = [
        Cuenta(
          idCuenta: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Santander',
          tipo: TipoCuenta.bancaria,
          numeroCuenta: '123456789',
          bancoEntidad: 'Banco Santander',
          moneda: 'ARS',
          colorHex: '#2196F3',
          icono: 'credit_card',
          fechaCreacion: DateTime.now(),
          activa: true,
          esPrincipal: true,
        ),
        Cuenta(
          idCuenta: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'BBVA',
          tipo: TipoCuenta.bancaria,
          numeroCuenta: '987654321',
          bancoEntidad: 'Banco BBVA',
          moneda: 'ARS',
          colorHex: '#9C27B0',
          icono: 'account_balance',
          fechaCreacion: DateTime.now(),
          activa: true,
          esPrincipal: false,
        ),
        Cuenta(
          idCuenta: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Efectivo',
          tipo: TipoCuenta.efectivo,
          moneda: 'ARS',
          colorHex: '#4CAF50',
          icono: 'money',
          fechaCreacion: DateTime.now(),
          activa: true,
          esPrincipal: false,
        ),
        Cuenta(
          idCuenta: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Mercado Pago',
          tipo: TipoCuenta.digital,
          numeroCuenta: 'MP123456',
          bancoEntidad: 'Mercado Libre',
          moneda: 'ARS',
          colorHex: '#E91E63',
          icono: 'account_balance_wallet',
          fechaCreacion: DateTime.now(),
          activa: true,
          esPrincipal: false,
        ),
      ];

      for (var account in defaultAccounts) {
        await _databaseService.insertCuenta(account);
      }

      print('Cuentas por defecto creadas para usuario $userId');
    } catch (e) {
      print('Error creando cuentas por defecto: $e');
      rethrow;
    }
  }

  // Create default categories for a new user
  Future<void> createDefaultCategoriesForUser(int userId) async {
    try {
      final defaultCategories = [
        // Income categories
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Sueldo',
          tipo: TipoCategoria.ingreso,
          colorHex: '#4CAF50',
          icono: 'work',
          descripcion: 'Ingresos por trabajo',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Ventas',
          tipo: TipoCategoria.ingreso,
          colorHex: '#8BC34A',
          icono: 'shopping_cart',
          descripcion: 'Ingresos por ventas',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Otros Ingresos',
          tipo: TipoCategoria.ingreso,
          colorHex: '#CDDC39',
          icono: 'attach_money',
          descripcion: 'Otros tipos de ingresos',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        // Expense categories
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Alimentación',
          tipo: TipoCategoria.gasto,
          colorHex: '#FF9800',
          icono: 'restaurant',
          descripcion: 'Comida y bebidas',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Transporte',
          tipo: TipoCategoria.gasto,
          colorHex: '#2196F3',
          icono: 'directions_car',
          descripcion: 'Gasolina, transporte público, etc.',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Servicios',
          tipo: TipoCategoria.gasto,
          colorHex: '#9C27B0',
          icono: 'bolt',
          descripcion: 'Luz, gas, internet, teléfono',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Salud',
          tipo: TipoCategoria.gasto,
          colorHex: '#F44336',
          icono: 'local_hospital',
          descripcion: 'Medicinas, consultas médicas',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Educación',
          tipo: TipoCategoria.gasto,
          colorHex: '#3F51B5',
          icono: 'school',
          descripcion: 'Cursos, libros, material educativo',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Entretenimiento',
          tipo: TipoCategoria.gasto,
          colorHex: '#E91E63',
          icono: 'movie',
          descripcion: 'Cine, streaming, salidas',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
        Categoria(
          idCategoria: 0, // Will be auto-generated by database
          idUsuario: userId,
          nombre: 'Compras',
          tipo: TipoCategoria.gasto,
          colorHex: '#795548',
          icono: 'shopping_bag',
          descripcion: 'Ropa, electrónicos, hogar',
          fechaCreacion: DateTime.now(),
          activa: true,
        ),
      ];

      for (var category in defaultCategories) {
        await _databaseService.insertCategoria(category);
      }

      print('Categorías por defecto creadas para usuario $userId');
    } catch (e) {
      print('Error creando categorías por defecto: $e');
      rethrow;
    }
  }

  Future<void> _insertSampleFixedExpenses(int userId) async {
    try {
      final List<Cuenta> userAccounts = await _databaseService.getCuentas(
        userId,
      );
      final Cuenta defaultAccount = userAccounts.firstWhere(
        (c) => c.esPrincipal,
        orElse: () => userAccounts.first,
      );

      final List<Categoria> expenseCategories =
          (await _databaseService.getCategorias(
            userId,
          )).where((c) => c.tipo == TipoCategoria.gasto).toList();

      final Categoria alimentacionCategory = expenseCategories.firstWhere(
        (c) => c.nombre == 'Alimentación',
        orElse: () => expenseCategories.first,
      );
      final Categoria transporteCategory = expenseCategories.firstWhere(
        (c) => c.nombre == 'Transporte',
        orElse: () => expenseCategories.first,
      );
      final Categoria serviciosCategory = expenseCategories.firstWhere(
        (c) => c.nombre == 'Servicios',
        orElse: () => expenseCategories.first,
      );

      final List<GastoFijo> sampleFixedExpenses = [
        GastoFijo(
          idGasto: 0,
          idUsuario: userId,
          idCuenta: defaultAccount.idCuenta,
          idCategoria: alimentacionCategory.idCategoria ?? 1,
          nombre: 'Suscripción Gimnasio',
          descripcion: 'Cuota mensual del gimnasio',
          montoTotal: 8000.0,
          cuotas: 1,
          montoCuotas: 8000.0,
          frecuencia: FrecuenciaGasto.MENSUAL.name,
          diaMes: 5,
          fechaInicio: DateTime.now().subtract(const Duration(days: 30)),
          activo: true,
          recordatorioDias: 3,
        ),
        GastoFijo(
          idGasto: 0,
          idUsuario: userId,
          idCuenta: defaultAccount.idCuenta,
          idCategoria: serviciosCategory.idCategoria ?? 1,
          nombre: 'Factura Internet',
          descripcion: 'Servicio de internet mensual',
          montoTotal: 4500.0,
          cuotas: 1,
          montoCuotas: 4500.0,
          frecuencia: FrecuenciaGasto.MENSUAL.name,
          diaMes: 10,
          fechaInicio: DateTime.now().subtract(const Duration(days: 15)),
          activo: true,
          recordatorioDias: 5,
        ),
        GastoFijo(
          idGasto: 0,
          idUsuario: userId,
          idCuenta: defaultAccount.idCuenta,
          idCategoria: transporteCategory.idCategoria ?? 1,
          nombre: 'Transporte Semanal',
          descripcion: 'Gastos de transporte público',
          montoTotal: 1500.0,
          cuotas: 1,
          montoCuotas: 1500.0,
          frecuencia: FrecuenciaGasto.SEMANAL.name,
          diaSemana: 1, // Lunes
          fechaInicio: DateTime.now().subtract(const Duration(days: 7)),
          activo: true,
          recordatorioDias: 1,
        ),
      ];

      for (var gasto in sampleFixedExpenses) {
        await _databaseService.insertGastoFijo(gasto);
      }
      print('Gastos fijos de ejemplo insertados para usuario $userId');
    } catch (e) {
      print('Error insertando gastos fijos de ejemplo: $e');
      rethrow;
    }
  }

  Future<void> _insertSampleTransactions(int userId) async {
    try {
      final List<Cuenta> userAccounts = await _databaseService.getCuentas(
        userId,
      );
      final Cuenta mainAccount = userAccounts.firstWhere(
        (c) => c.esPrincipal,
        orElse: () => userAccounts.first,
      );

      final List<Categoria> categories = await _databaseService.getCategorias(
        userId,
      );
      final Categoria incomeCategory = categories.firstWhere(
        (c) => c.nombre == 'Sueldo',
        orElse: () => categories.first,
      );
      final Categoria expenseCategory = categories.firstWhere(
        (c) => c.nombre == 'Alimentación',
        orElse: () => categories.first,
      );

      final List<Transaccion> sampleTransactions = [
        Transaccion(
          idTransaccion: _uuid.v4(),
          idUsuario: userId,
          idCuenta: mainAccount.idCuenta,
          idCategoria: incomeCategory.idCategoria ?? 1,
          tipoMovimiento: 1, // 1: Ingreso
          signo: 1, // 1: Suma
          moneda: mainAccount.moneda,
          tipo: TipoTransaccion.ingreso,
          monto: 50000.0,
          descripcion: 'Sueldo mensual',
          fechaTransaccion: DateTime.now().subtract(const Duration(days: 5)),
          fechaRegistro: DateTime.now(),
        ),
        Transaccion(
          idTransaccion: _uuid.v4(),
          idUsuario: userId,
          idCuenta: mainAccount.idCuenta,
          idCategoria: expenseCategory.idCategoria ?? 1,
          tipoMovimiento: 2, // 2: Egreso
          signo: -1, // -1: Resta
          moneda: mainAccount.moneda,
          tipo: TipoTransaccion.gasto,
          monto: 1200.0,
          descripcion: 'Compras en supermercado',
          fechaTransaccion: DateTime.now().subtract(const Duration(days: 2)),
          fechaRegistro: DateTime.now(),
        ),
      ];

      for (var transaction in sampleTransactions) {
        await _databaseService.insertTransaccion(transaction);
      }
      print('Transacciones de ejemplo insertadas para usuario $userId');
    } catch (e) {
      print('Error insertando transacciones de ejemplo: $e');
      rethrow;
    }
  }

  Future<void> _insertSampleContacts(int userId) async {
    try {
      final List<Contacto> sampleContacts = [
        Contacto(
          idContacto: 0,
          idUsuario: userId,
          nombre: 'Juan Pérez',
          email: 'juan.perez@example.com',
          telefono: '1122334455',
          banco: 'Banco Santander',
          cuentaDestino: 'ES12345678901234567890',
          notas: 'Contacto para pagos de alquiler',
          favorito: true,
        ),
        Contacto(
          idContacto: 0,
          idUsuario: userId,
          nombre: 'María García',
          email: 'maria.garcia@example.com',
          telefono: '1199887766',
          banco: 'Banco BBVA',
          cuentaDestino: 'ES09876543210987654321',
          notas: 'Amiga, para dividir gastos',
          favorito: false,
        ),
      ];

      for (var contact in sampleContacts) {
        await _databaseService.insertContacto(contact);
      }
      print('Contactos de ejemplo insertados para usuario $userId');
    } catch (e) {
      print('Error insertando contactos de ejemplo: $e');
      rethrow;
    }
  }

  // Initialize user with default data (accounts and categories)
  Future<void> initializeUserDefaults(int userId) async {
    try {
      await createDefaultAccountsForUser(userId);
      await createDefaultCategoriesForUser(userId);
      print('Datos por defecto inicializados para usuario $userId');
    } catch (e) {
      print('Error inicializando datos por defecto: $e');
      rethrow;
    }
  }

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertTiposMovimiento() async {
    final tipos = [
      TipoMovimiento(
        id: _uuid.v4(),
        codigoMovimiento: 'ING',
        descripcion: 'Ingreso de dinero',
        signo: SignoMovimiento.ingreso,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      TipoMovimiento(
        id: _uuid.v4(),
        codigoMovimiento: 'EGR',
        descripcion: 'Egreso de dinero',
        signo: SignoMovimiento.salida,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      TipoMovimiento(
        id: _uuid.v4(),
        codigoMovimiento: 'TRF',
        descripcion: 'Transferencia',
        signo: SignoMovimiento.salida,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var tipo in tipos) {
      await _databaseService.insertTipoMovimiento(tipo);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertPeriodicidades() async {
    final periodicidades = [
      Periodicidad(
        id: _uuid.v4(),
        codigo: 'DIARIA',
        descripcion: 'Diaria',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Periodicidad(
        id: _uuid.v4(),
        codigo: 'SEMANAL',
        descripcion: 'Semanal',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Periodicidad(
        id: _uuid.v4(),
        codigo: 'MENSUAL',
        descripcion: 'Mensual',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Periodicidad(
        id: _uuid.v4(),
        codigo: 'TRIMESTRAL',
        descripcion: 'Trimestral',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Periodicidad(
        id: _uuid.v4(),
        codigo: 'ANUAL',
        descripcion: 'Anual',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var periodicidad in periodicidades) {
      await _databaseService.insertPeriodicidad(periodicidad);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertOperaciones() async {
    final operaciones = [
      Operacion(
        id: _uuid.v4(),
        operacion: 'COMPRA',
        descripcion: 'Compra de bienes o servicios',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Operacion(
        id: _uuid.v4(),
        operacion: 'VENTA',
        descripcion: 'Venta de bienes o servicios',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Operacion(
        id: _uuid.v4(),
        operacion: 'PAGO',
        descripcion: 'Pago de servicios o deudas',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Operacion(
        id: _uuid.v4(),
        operacion: 'COBRO',
        descripcion: 'Cobro de servicios o ventas',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Operacion(
        id: _uuid.v4(),
        operacion: 'TRANSFERENCIA',
        descripcion: 'Transferencia entre cuentas',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var operacion in operaciones) {
      await _databaseService.insertOperacion(operacion);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertConceptos() async {
    final conceptos = [
      Concepto(
        id: _uuid.v4(),
        concepto: 'ALIMENTACION',
        descripcion: 'Gastos relacionados con comida y bebida',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'TRANSPORTE',
        descripcion: 'Gastos de movilidad y transporte',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'SERVICIOS',
        descripcion: 'Servicios básicos (luz, gas, internet, etc.)',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'SALUD',
        descripcion: 'Gastos médicos y de salud',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'EDUCACION',
        descripcion: 'Gastos educativos y de formación',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'ENTRETENIMIENTO',
        descripcion: 'Gastos de ocio y entretenimiento',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'SUELDO',
        descripcion: 'Ingresos por salario o trabajo',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Concepto(
        id: _uuid.v4(),
        concepto: 'VENTA',
        descripcion: 'Ingresos por ventas de productos',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var concepto in conceptos) {
      await _databaseService.insertConcepto(concepto);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertContactos() async {
    final contactos = [
      Contacto(
        id: _uuid.v4(),
        contacto: 'MERCADO LIBRE',
        alias: 'ML',
        observacion: 'Plataforma de compras online',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Contacto(
        id: _uuid.v4(),
        contacto: 'SUPERMERCADO DIA',
        alias: 'DIA',
        observacion: 'Supermercado de barrio',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Contacto(
        id: _uuid.v4(),
        contacto: 'EMPRESA DE LUZ',
        alias: 'EDESUR',
        observacion: 'Servicio eléctrico',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Contacto(
        id: _uuid.v4(),
        contacto: 'NETFLIX',
        alias: 'NFLX',
        observacion: 'Servicio de streaming',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Contacto(
        id: _uuid.v4(),
        contacto: 'UBER',
        alias: 'UBER',
        observacion: 'Aplicación de transporte',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Contacto(
        id: _uuid.v4(),
        contacto: 'CLIENTE ABC',
        alias: 'CLIENTE_ABC',
        observacion: 'Cliente frecuente de servicios',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var contacto in contactos) {
      await _databaseService.insertContacto(contacto);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertMovimientos() async {
    final movimientos = [
      Movimiento(
        id: _uuid.v4(),
        billetera: 'default_wallet',
        codigoMovimiento: 'EGR',
        fecha: DateTime.now().subtract(const Duration(days: 1)),
        concepto: 'ALIMENTACION',
        importe: 4500.0,
        contacto: 'SUPERMERCADO DIA',
        operacion: 'COMPRA',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Movimiento(
        id: _uuid.v4(),
        billetera: 'default_wallet',
        codigoMovimiento: 'ING',
        fecha: DateTime.now().subtract(const Duration(days: 2)),
        concepto: 'SUELDO',
        importe: 150000.0,
        contacto: 'EMPRESA EJEMPLO',
        operacion: 'COBRO',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Movimiento(
        id: _uuid.v4(),
        billetera: 'default_wallet',
        codigoMovimiento: 'EGR',
        fecha: DateTime.now().subtract(const Duration(days: 3)),
        concepto: 'SERVICIOS',
        importe: 8500.0,
        contacto: 'EMPRESA DE LUZ',
        operacion: 'PAGO',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Movimiento(
        id: _uuid.v4(),
        billetera: 'default_wallet',
        codigoMovimiento: 'EGR',
        fecha: DateTime.now().subtract(const Duration(days: 5)),
        concepto: 'ENTRETENIMIENTO',
        importe: 2500.0,
        contacto: 'NETFLIX',
        operacion: 'PAGO',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Movimiento(
        id: _uuid.v4(),
        billetera: 'default_wallet',
        codigoMovimiento: 'TRF',
        fecha: DateTime.now().subtract(const Duration(days: 7)),
        concepto: 'TRANSPORTE',
        importe: 1200.0,
        contacto: 'UBER',
        operacion: 'TRANSFERENCIA',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var movimiento in movimientos) {
      await _databaseService.insertMovimiento(movimiento);
    }
  }
  */

  // TODO: Update for new schema - old models no longer exist
  /*
  Future<void> _insertGastos() async {
    final gastos = [
      Gasto(
        id: _uuid.v4(),
        fecha: DateTime.now().subtract(const Duration(days: 1)),
        concepto: 'ALIMENTACION',
        periodicidad: 'DIARIA',
        importe: 500.0,
        billetera: 'default_wallet',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Gasto(
        id: _uuid.v4(),
        fecha: DateTime.now().subtract(const Duration(days: 7)),
        concepto: 'TRANSPORTE',
        periodicidad: 'SEMANAL',
        importe: 2000.0,
        billetera: 'default_wallet',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
      Gasto(
        id: _uuid.v4(),
        fecha: DateTime.now().subtract(const Duration(days: 30)),
        concepto: 'SERVICIOS',
        periodicidad: 'MENSUAL',
        importe: 8000.0,
        billetera: 'default_wallet',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      ),
    ];

    for (var gasto in gastos) {
      await _databaseService.insertGasto(gasto);
    }
  }
  */
}
